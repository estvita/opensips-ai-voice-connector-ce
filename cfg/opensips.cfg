#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level=3
xlog_level=3
stderror_enabled=no
syslog_enabled=yes
syslog_facility=LOG_LOCAL7

udp_workers=1
db_default_url="postgres://opensips:opensips@127.0.0.1:6432/opensips"
/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes
server_header="Server: exten.bot"
user_agent_header="User-Agent: exten.bot"

socket=udp:*:5060   # CUSTOMIZE ME



####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

loadmodule "sipmsgops.so"
loadmodule "signaling.so"
loadmodule "cfgutils.so"
loadmodule "proto_tcp.so"
loadmodule "proto_udp.so"
loadmodule "sl.so"
loadmodule "event_datagram.so"
loadmodule "mi_datagram.so"
loadmodule "db_postgres.so"

loadmodule "permissions.so"
modparam("permissions", "db_url", "postgres://opensips:opensips@127.0.0.1:6432/opensips")

#### REST CLIENT module
loadmodule "rest_client.so"
modparam("rest_client", "curl_timeout", 10)

loadmodule "json.so"

loadmodule "exec.so"

#### DROUTING module
loadmodule "drouting.so"
modparam("drouting", "drd_table", "dr_gateways")
modparam("drouting", "drr_table", "dr_rules")
modparam("drouting", "drg_table", "dr_groups")
modparam("drouting", "drc_table", "dr_carriers")

#### DIALPLAN module
loadmodule "dialplan.so"

#### CALL CENTER module
loadmodule "call_center.so"

#### DISPATCHER module
loadmodule "dispatcher.so"

#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_mode", 1)

#### SIPCAPTURE module
#loadmodule "sipcapture.so"
#modparam("sipcapture", "capture_on", 1)
#modparam("sipcapture", "db_url", "postgres://homer:homer@127.0.0.1:5432/homer_data")
#modparam("sipcapture", "table_name", "opensips")



### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "enable_stats", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 1)


#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

#### HEP module
# loadmodule "proto_hep.so"

### TRACER module
loadmodule "tracer.so"
modparam("tracer", "trace_on", 1)

#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "ip", "0.0.0.0")

#### MI HTTP module
loadmodule "mi_http.so"

loadmodule "mi_script.so"

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
modparam("registrar", "max_contacts", 5)

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/run/opensips/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### Transaction Module
loadmodule "tm.so"
# modparam("tm", "fr_timeout", 2)
# modparam("tm", "fr_inv_timeout", 3)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
#modparam("auth_db", "calculate_ha1", yes)
#modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")

#### B2BUA modiles
loadmodule "b2b_entities.so"
loadmodule "b2b_logic.so"

#### UAC auth module
loadmodule "uac_auth.so"

loadmodule "uac.so"
#### SQLops module
loadmodule "sqlops.so"

#### UAC registrant module
loadmodule "uac_registrant.so"
modparam("uac_registrant", "timer_interval", 60)

modparam("mi_datagram", "socket_name", "udp:0.0.0.0:8080")

####### Routing Logic ########

# main request routing logic

route{

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER|OPTIONS") ) ) {
		# if (check_address( 0, "$si", 5060, "ANY")) {}
		if (is_myself("$fd")) {
			route(authorize);
			consume_credentials();
		} else {
			
			# call from uac_registrant 
			if (!is_myself("$rd")) {
				mi("reg_list $tu $ru sip:$rd", $var(out));
				$json(reglist) := $var(out);
				$var(state) = $json(reglist/Registrant/state);
				xlog("L_INFO", "$ru state: $var(state)\n");
				$var(from_registrant) = true;
				if (!$var(state) || $var(state) != "REGISTERED_STATE") {
					# if caller is not local, then called number must be local
					send_reply(403,"Relay Forbidden");
					exit;
				}
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply(403,"Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	if (is_method("INVITE") || has_totag()) {

		xlog("Call $rU from IP: $si\n");
		# Замена номера 700000000000 на openai (это тест для битрикса)
		if ($rU == "70000000000") {
			setuser("openai");
		}

        if ($rU == "openai") {
            ua_session_server_init($var(b2b_key), "drbh", '{"bot_header": "Contact"}');
            exit;
        }

        if ($var(from_registrant)) {
            ua_session_server_init($var(b2b_key), "drbh", '{"bot_header": "To"}');
            exit;
        }
        
        # Звонки наружу (настройка в CP)
        # if ($rU =~ "^87[0-9]{9}$") {
        #     if (!do_routing()) {
        #         send_reply(404, "Not Found");
        #         exit;
        #     }
		# 	t_relay();
		# 	exit;
        # }

        if (!create_dialog("B")) {
            send_reply(500, "Internal Server Error");
			xlog("Unknown user $fU from IP: $si\n");
            exit;
        }
		# xlog("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
		# ua_session_server_init($var(b2b_key), "drbh");
		# xlog("Started new call for $var(b2b_key)\n");
		
		do_accounting("log");
	}

	
	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n"); 
		
		route(relay);
	}

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER")) {
		# store the registration and generate a SIP reply
		route(authorize);
		# route(billing);

		if ($au!=$tU) {
			send_reply(403,"Forbidden auth ID");
			exit;
		}		
		if (!save("location"))
			xlog("failed to register AoR $tu\n");

		exit;
	}

	if (is_method("OPTIONS")) {
		if (is_from_gw(-1, "n")) {
			send_reply(200, "OK");
			exit;
		}

		if (check_address( 0, "$si", 5060, "ANY")) {
			send_reply(200, "OK");
			exit;
		}

		if (!is_registered("location", $fu)) {
			xlog("Unknown user $fU from IP: $si\n");
			send_reply(403, "Forbidden");
			exit;
		}
		
		send_reply(200, "OK");
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","method-filtering")) {
		t_reply(404, "Not Found");
		exit;
	}

	# when routing via usrloc, log the missed calls also
	do_accounting("log","missed");
	route(relay);
}
route[authorize] {
    $var(auth_code) = www_authorize("", "subscriber");

    if ($var(auth_code) == -1 || $var(auth_code) == -2) {
        send_reply(403, "Forbidden");
		xlog("Authentication failed for $fU@$fd from $si\n");
        exit;
    }

    if ($var(auth_code) < 0) {
        www_challenge("", "auth");
        exit;
	}

}
route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}

	
}